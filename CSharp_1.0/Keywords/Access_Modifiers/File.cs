using System;
/**
Beginning with C# 11, the file contextual keyword is a type modifier.
The file modifier in C# restricts the visibility of a top-level type to the file in which it is declared. This means that the type cannot be accessed from any other file in the project.

Use Case
Source Generators: The file modifier is particularly useful for types generated by source generators. Source generators are tools that automatically generate source code during the compilation process.
Avoiding Name Collisions: By using the file modifier, source generators can ensure that the generated types do not conflict with other types in the project, even if they have the same name.

File-Local Type Restrictions
Return Type or Parameter Type:

A file-local type cannot be used as the return type or parameter type of any member (method, property, etc.) declared in a non-file-local type.
Reason: This restriction ensures that the file-local type remains confined to the file where it is declared and does not leak into other parts of the codebase.
Field Member:

A file-local type cannot be a field member of a non-file-local type.
Reason: Similar to the above, this restriction maintains the encapsulation of the file-local type within its own file.

File-Local Type Restrictions: Ensures that file-local types do not leak outside their defining file by restricting their use as return types, parameter types, or field members in non-file-local types.
Interface Implementation: Allows more visible types to implement file-local interfaces, either implicitly (usable anywhere) or explicitly (usable only within the same file).


**/

namespace FileNameSpace
{

    // In File1.cs:
    file interface IWidget
    {
        int ProvideAnswer();
    }

    file class HiddenWidget
    {
        public int Work() => 42;
    }

    file class TestFileClass{
        public string stringName = "lkjlkj";
    }

    public class Widget : IWidget
    {
        public int ProvideAnswer()
        {
            var worker = new HiddenWidget();
            return worker.Work();
        }
    }
    class FileNameSpaceClass
    {
        public static void Main()
        {
            Console.WriteLine("File Access Modifier");
            Widget w = new Widget();
            Console.WriteLine(w.ProvideAnswer());

            HiddenWidget h = new HiddenWidget();
            //h.Test(); - Error connot access non file declarations or members.
        }
    }
}