/**

Use the async modifier to specify that a method, lambda expression, or anonymous method is asynchronous. If you use this modifier on a method or expression, it's referred to as an async method.

public async Task<int> ExampleMethodAsync()
{
    //...
}

An async method runs synchronously until it reaches its first await expression, at which point the method is suspended until the awaited task is complete. In the meantime, control returns to the caller of the method,

If the method that the async keyword modifies doesn't contain an await expression or statement, the method executes synchronously. A compiler warning alerts you to any async methods that don't contain await statements, because that situation might indicate an error. See Compiler Warning (level 1) CS4014.

The async keyword is contextual in that it's a keyword only when it modifies a method, a lambda expression, or an anonymous method. In all other contexts, it's interpreted as an identifier.

Return Types:
-------------
An async method can have the following return types:
    Task
    Task<TResult>
    void. async void methods are generally discouraged for code other than event handlers because callers cannot await those methods and must implement a different mechanism to report successful completion or error conditions.
    Any type that has an accessible GetAwaiter method. The System.Threading.Tasks.ValueTask<TResult> type is one such implementation. It is available by adding the NuGet package System.Threading.Tasks.Extensions.
    The async method can't declare any in, ref or out parameters, nor can it have a reference return value, but it can call methods that have such parameters.

The async method can't declare any in, ref or out parameters, nor can it have a reference return value, but it can call methods that have such parameters.

You specify Task<TResult> as the return type of an async method if the return statement of the method specifies an operand of type TResult. You use Task if no meaningful value is returned when the method is completed. That is, a call to the method returns a Task, but when the Task is completed, any await expression that's awaiting the Task evaluates to void.

You use the void return type primarily to define event handlers, which require that return type. The caller of a void-returning async method can't await it and can't catch exceptions that the method throws.

You return another type, typically a value type, that has a GetAwaiter method to minimize memory allocations in performance-critical sections of code.


AsyncStateMachineAttribute Class:
--------------------------------
Indicates whether a method is marked with either the Async or async modifier.
    [System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)]
public sealed class AsyncStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute

Remarks
You shouldn't apply the AsyncStateMachine attribute to methods in your code. For methods that have the async modifier, the compiler will apply the AsyncStateMachine attribute in the IL that the compiler emits.

When a method (MethodName) has the Async or async modifier, the compiler emits IL that includes a state machine structure. This structure contains the code in the method. That IL also contains a stub method (MethodName) that calls into the state machine. The compiler adds the AsyncStateMachine attribute to the stub method so that tools can identify the corresponding state machine. Details of the emitted IL might change in future releases of the compilers.]

Constructors
AsyncStateMachineAttribute(Type)	- Initializes a new instance of the AsyncStateMachineAttribute class.

Properties:
-------------
StateMachineType	- Returns the type object for the underlying state machine type that was generated by the compiler to implement the state machine method.
(Inherited from StateMachineAttribute)
TypeId	- When implemented in a derived class, gets a unique identifier for this Attribute.(Inherited from Attribute)
Methods:
--------
Equals(Object)	- eturns a value that indicates whether this instance is equal to a specified object.(Inherited from Attribute)
GetHashCode()	- Returns the hash code for this instance.(Inherited from Attribute)
GetType()	- Gets the Type of the current instance.(Inherited from Object)
IsDefaultAttribute()	- When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class.(Inherited from Attribute)
Match(Object)-  When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.(Inherited from Attribute)
MemberwiseClone() - Creates a shallow copy of the current Object.(Inherited from Object)
ToString()	- Returns a string that represents the current object.(Inherited from Object)

**/
using System;


namespace AsynchronousProgramming{
    class AsyncKeyword{
        public static void Main(){
            Console.WriteLine("Asynchronous Programming.");
        }
    }
}